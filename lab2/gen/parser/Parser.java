package parser;

import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short TRUE = 6;
		static public final short FALSE = 7;
		static public final short INT_LITERAL = 8;
		static public final short RPAREN = 9;
		static public final short RCURLY = 10;
		static public final short INT = 11;
		static public final short VOID = 12;
		static public final short BOOLEAN = 13;
		static public final short LCURLY = 14;
		static public final short SEMICOLON = 15;
		static public final short IF = 16;
		static public final short WHILE = 17;
		static public final short RETURN = 18;
		static public final short BREAK = 19;
		static public final short RBRACKET = 20;
		static public final short COMMA = 21;
		static public final short PUBLIC = 22;
		static public final short IMPORT = 23;
		static public final short PLUS = 24;
		static public final short TIMES = 25;
		static public final short DIV = 26;
		static public final short MOD = 27;
		static public final short EQL = 28;
		static public final short MODULE = 29;
		static public final short ELSE = 30;
		static public final short TYPE = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LEQ = 34;
		static public final short GEQ = 35;
		static public final short LT = 36;
		static public final short GT = 37;
	}
	static public class AltGoals {
		static public final short Dummy = 38;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDbmTqL4KKXl$tDWH2Rm4X44eW0QGaWX08X4v22108I6#Az28zz5vLYafH54KwX19wZmf" +
		"O454H2mgA54K4GKJ5WjT$vqqscvVTX1mEHtVFDtFdld$AcxPt0NCbXg0N4Z0Eup49VT4RBw" +
		"C7UY8AAx0IaMY0XcY4ncY2fcY6kbbIry#IkaM6wZOsTKRQ#2neEzgqg$4i9cCq9c0X5c6YY" +
		"9p71gp3UiGW6rgY7RgWarq5drIL$EDLDTYjBL#lgkmOv5BbyAhgZtukbLy6ge4kLKwNoZuV" +
		"SzHyt9ktjVBcmgEegURFn6nKbLK8HHNCn7uyWkgeWToOdwxcOnxRw#RH#uH7xnIFtgSzUf$" +
		"Fm3lDDajBi1GlOZcMuILqjJ#L3Udqzl88ZCGehCrKPoyFmLYtqVN9SltxBRltFu0hcaU$oG" +
		"64SIL3vJhMO8PUqM5ksZ5kTXBoOglQ2Kbu2aEP3hPsd5n2FhtthDHIRKGbkIDt4CvTlXErM" +
		"MSu77WEC#G2zl6xGsxWLMoMd$2wNE08jYCH1P0V1L48XU6FXr2KdY8eXW04eZXAeWpAeWBA" +
		"8GZbKK9MeoA2KGeFuo1Aep92K4tkoX#eXJg8HZr4oBU8HIkqHNEqHnmwu74yYSwOZgcO9Hl" +
		"H7NFn3CUpc9vDc2UNiGMlo4NCmmAyW6ru3Qkuqhkm6tkmbtqSmc7sKO6zLcAVbNaAgg8QJq" +
		"EOdZVdEQd5jwtD$YDuVzRxtwWVbDRWdU203szBNzvbEG3UFBbu8#JXJYd9bIoWrjAkQkkcW" +
		"bULZvigbrTLRkwI55L#hohdlP#Y2hmdLG6NolDyPCLRaB#ErloruMviofivYhz0yUftC9Ot" +
		"TI5wxx#N1#Mrpr9fTGg3U0hByzJRd$gbyzZBnNYI0tY#CzFPo$RHPRN#$PRJzb#VkyHw4ok" +
		"MYD9wQqNTjUwsmTlCsWc6YaCCjc$jE3$sObbMQgcYUOfoyklWBY$5tsDddM3LZnzRAgBdFr" +
		"gbripxSwJPEMQ3#g8SeO#wHujprO8urh9Avs2B$jpZPNZwIh2DSbGNvMhcvQhaL6VOKAtbf" +
		"CVgFP0gPvz#rCVHZbIs7wqOVasM8td7#jFJd3u$MeNL2XVMUGcEA1$xC9W2oLFW$9W1J1QG" +
		"1BAUR2C7oM5oX5m43DufHb5oXtgEpGmXBKXpqeh4avgaFcb4sf58qf0q9dL9KrAFr27DI3J" +
		"fJZgIrgGJwK0waowa1uabVSa0qfEq9zL87pACX99#plT8WUL0Cfo4ao0oaFJdWrdC1raQnX" +
		"umXxZNiyFd8ybWhK#aFLJxnt0UbZ4VvPn3vjsOdzBFnl7PQkQZMRYiVIEit4ZGvGHRFxtvB" +
		"55hUf6TkiyaxJjAJRcqTOmvEZz1hgSVkt4wetVJchDiTxmUGmFjcqrxWlPD96Er$nBjITg#" +
		"HdkAhQtRz4qbSpBkqvocyoWoNTinP8QsSxEjXHxgHH3d#WMJ9cGkMQoVjIGpjUrSrybaAPd" +
		"lLd#spbUGHQb#dDHvN6RpzL$3ptboDhLi7FEWkUhs$4QApNzKPzpicrdiDxkjV4NdWJgluT" +
		"PdDksBILl7oE#zVIF0oiqmsajq$UNwsMTCjjZq5tNEVMZSzT3UhSpVoGXEjSsckizJQJLcf" +
		"DQ6EUyrhJddeQswMjyoitup7fFp7ZMYFFYRwDnqdfkij#jndoJZ0NtaBxcfSgRok$mclwPJ" +
		"t5RfD$Ard9EpyfLyAMUKvmkLVkxISUtbKrVfDFc4d28VouToKdRI#a3UO$gk9CkRp9Fb3Ja" +
		"iXsI$yFUBwG7P9tjb3#tTiajsoWxPBacoJRQg5hV8SJcXh4rahQnNwJhbMIER9L5Pn#LzUK" +
		"VUbcDoL8x8M$HyfFpVg$IA76VwWroJ7#LgchVyJgM$kCgtv6VEpT$A$fD9LyQV1Z4PZVeoU" +
		"Z496C4u6CUO12gMIQ45VyrZuSEOnfSnZq70sCHmKTsD6cmZXMYsrLe1nWGE0lvdCGduByBm" +
		"IargQv5mHWpXZ6HgCw$3UX4A1$zpc8nB3KKeonLKzE53e6BLCFhYc7kYAhKD#Pon0MDzGr6" +
		"5liRqCLPWT6Mu2A4$X7b5hpXKFEUa4lkFPyvOX96yoOZ8GS28py7$EkNH$b#YDGD7");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN37 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 37];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Module
			RETURN2,	// [1] $goal = $Dummy Dummy; returns 'Dummy' although none is marked
			RETURN6,	// [2] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [3] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [4] Imports = 
			RETURN3,	// [5] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [6] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [7] Declarations = 
			Action.RETURN,	// [8] Declaration = FunctionDeclaration
			Action.RETURN,	// [9] Declaration = FieldDeclaration
			Action.RETURN,	// [10] Declaration = TypeDeclaration
			RETURN9,	// [11] FunctionDeclaration = AccessId TypeName ID LPAREN ParameterList RPAREN LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [12] FieldDeclaration = AccessId TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [13] TypeDeclaration = AccessId TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [14] AccessId = PUBLIC
			Action.NONE,  	// [15] AccessId = 
			Action.RETURN,	// [16] TypeName = PrimitiveType
			Action.RETURN,	// [17] TypeName = ArrayType
			Action.RETURN,	// [18] TypeName = ID
			Action.RETURN,	// [19] PrimitiveType = VOID
			Action.RETURN,	// [20] PrimitiveType = BOOLEAN
			Action.RETURN,	// [21] PrimitiveType = INT
			RETURN3,	// [22] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [23] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [24] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [25] Parameter = TypeName ID; returns 'ID' although none is marked
			RETURN2,	// [26] ParameterList = Parameter ParameterY; returns 'ParameterY' although none is marked
			Action.NONE,  	// [27] ParameterList = 
			RETURN3,	// [28] ParameterY = COMMA Parameter ParameterY; returns 'ParameterY' although none is marked
			Action.NONE,  	// [29] ParameterY = 
			RETURN2,	// [30] Statements = Statement Statements; returns 'Statements' although none is marked
			Action.NONE,  	// [31] Statements = 
			Action.RETURN,	// [32] Statement = LocalVariableDeclaration
			Action.RETURN,	// [33] Statement = BlockStatement
			Action.RETURN,	// [34] Statement = IfStatement
			Action.RETURN,	// [35] Statement = WhileStatement
			Action.RETURN,	// [36] Statement = BreakStatement
			Action.RETURN,	// [37] Statement = ReturnStatement
			Action.RETURN,	// [38] Statement = ExpressionStatement
			RETURN3,	// [39] LocalVariableDeclaration = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [40] BlockStatement = LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN5,	// [41] IfStatement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN7,	// [42] IfStatement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [43] WhileStatement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [44] BreakStatement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [45] ReturnStatement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [46] ReturnStatement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [47] ExpressionStatement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [48] Expression = Assignment
			Action.RETURN,	// [49] Expression = RhsExpression
			RETURN3,	// [50] Assignment = LhsExpression EQL Expression; returns 'Expression' although none is marked
			RETURN2,	// [51] LhsExpression = ID LhsExpressionY; returns 'LhsExpressionY' although none is marked
			RETURN4,	// [52] LhsExpressionY = LBRACKET Expression RBRACKET LhsExpressionY; returns 'LhsExpressionY' although none is marked
			Action.NONE,  	// [53] LhsExpressionY = 
			Action.RETURN,	// [54] RhsExpression = ArithmeticExpression
			RETURN3,	// [55] RhsExpression = ArithmeticExpression ComparisonOperator ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			Action.RETURN,	// [56] ComparisonOperator = EQEQ
			Action.RETURN,	// [57] ComparisonOperator = NEQ
			Action.RETURN,	// [58] ComparisonOperator = LT
			Action.RETURN,	// [59] ComparisonOperator = LEQ
			Action.RETURN,	// [60] ComparisonOperator = GT
			Action.RETURN,	// [61] ComparisonOperator = GEQ
			RETURN2,	// [62] ArithmeticExpression = Term ArithmeticExpressionY; returns 'ArithmeticExpressionY' although none is marked
			RETURN3,	// [63] ArithmeticExpressionY = AdditiveOperator Term ArithmeticExpressionY; returns 'ArithmeticExpressionY' although none is marked
			Action.NONE,  	// [64] ArithmeticExpressionY = 
			Action.RETURN,	// [65] AdditiveOperator = PLUS
			Action.RETURN,	// [66] AdditiveOperator = MINUS
			RETURN2,	// [67] Term = Factor TermY; returns 'TermY' although none is marked
			RETURN3,	// [68] TermY = MultiplicativeOperator Factor TermY; returns 'TermY' although none is marked
			Action.NONE,  	// [69] TermY = 
			Action.RETURN,	// [70] MultiplicativeOperator = TIMES
			Action.RETURN,	// [71] MultiplicativeOperator = DIV
			Action.RETURN,	// [72] MultiplicativeOperator = MOD
			RETURN2,	// [73] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [74] Factor = PrimaryFactor
			Action.RETURN,	// [75] PrimaryFactor = LhsExpression
			Action.RETURN,	// [76] PrimaryFactor = FunctionCall
			Action.RETURN,	// [77] PrimaryFactor = ArrayExpression
			Action.RETURN,	// [78] PrimaryFactor = STRING_LITERAL
			Action.RETURN,	// [79] PrimaryFactor = INT_LITERAL
			Action.RETURN,	// [80] PrimaryFactor = Boolean
			RETURN3,	// [81] PrimaryFactor = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [82] Boolean = TRUE
			Action.RETURN,	// [83] Boolean = FALSE
			RETURN4,	// [84] FunctionCall = ID LPAREN ExpressionListEmpty RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [85] ExpressionListEmpty = ExpressionList
			Action.NONE,  	// [86] ExpressionListEmpty = 
			RETURN2,	// [87] ExpressionList = Expression ExpressionListY; returns 'ExpressionListY' although none is marked
			RETURN3,	// [88] ExpressionListY = COMMA Expression ExpressionListY; returns 'ExpressionListY' although none is marked
			Action.NONE,  	// [89] ExpressionListY = 
			RETURN3,	// [90] ArrayExpression = LBRACKET ExpressionList RBRACKET; returns 'RBRACKET' although none is marked
			RETURN37	// [91] Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL; returns 'EQL' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
