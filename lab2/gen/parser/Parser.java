package parser;

import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short TRUE = 4;
		static public final short FALSE = 5;
		static public final short INT_LITERAL = 6;
		static public final short MINUS = 7;
		static public final short STRING_LITERAL = 8;
		static public final short RPAREN = 9;
		static public final short RCURLY = 10;
		static public final short VOID = 11;
		static public final short LCURLY = 12;
		static public final short SEMICOLON = 13;
		static public final short IF = 14;
		static public final short WHILE = 15;
		static public final short RETURN = 16;
		static public final short BREAK = 17;
		static public final short COMMA = 18;
		static public final short RBRACKET = 19;
		static public final short PUBLIC = 20;
		static public final short IMPORT = 21;
		static public final short PLUS = 22;
		static public final short TIMES = 23;
		static public final short DIV = 24;
		static public final short MOD = 25;
		static public final short EQL = 26;
		static public final short MODULE = 27;
		static public final short ELSE = 28;
		static public final short TYPE = 29;
		static public final short EQEQ = 30;
		static public final short NEQ = 31;
		static public final short LEQ = 32;
		static public final short GEQ = 33;
		static public final short LT = 34;
		static public final short GT = 35;
		static public final short INT = 36;
		static public final short BOOLEAN = 37;
	}
	static public class AltGoals {
		static public final short Dummy = 38;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDbmTSLLKSnt$tWgWWY20E5Dm2AWWg8XAO6z0GSU#zoinLsjIijA7PtgMbvGPnevQMvIn" +
		"NIzEoCXiQPJPj$VlTymxFn#KzYCXFlVVvtlC$$$Ex$pFkVUVy7s3EnL9CnYZSX5jmAoPWB9" +
		"x328n4Lop6yqZ1bMYF3kY8JkYCBhYYLEfsfL9VLQowbqrTdBPFARG3RTeNi12tuo4yZ1Sn4" +
		"xU9o2TOWkueXnxeYo4OP5V0sw6GFpqgV7ICyXuL5M2g6CiyAXAGgc9KzAX8rmfVfsAsRTxt" +
		"gdd$FMzFvLs3UFb5zP63Un23IeXb7$Em2ItG4gtWXmUAtDdVRRnXRhrZt7hdkFKkSEjzL7d" +
		"lTAx5BBKMr#C6p80$XjfRP7KHRMdhrWXkTevWV9dZbQN$YOZNSwsCQCHXCvzF09eWMp#VDR" +
		"W6L#ldvuLLwerVWYVm99x6itWApp3Qj89eaez7C9TtN8jSlCIM6vtz939IDW9rf6nSXs2oX" +
		"E#68sORL45hPLNbkp49GMGjfc8AcMv5bNDo3Ylah9n5Y9oMqrZDjtKBgd74rL43o$cjYLe8" +
		"HJXgenxg8mmDqG2HQ8GwQ8m8MOvcQ8gwY49p#GDvSX59I4DRT4EoV8eCP28BlT4F0p0EWp4" +
		"ST#0kt2rhS1$kntoEO3v6ut4iedSP7iHZSWOhvJEimmPiH1xMOok0ROXWZr5SlwRiBPhlUt" +
		"EkPvnUotZEC84pJMIlITm9a$ytwikbDRWhUS6RUvyFzwuAN25V$k8hyJa5y7qBv3EtAxAq0" +
		"XuL3RN2pwCYW7kFfUZjKM7LBKNj4XMLdGhtyowDr#1vvglxoE1PKOKdY1$FfQfy1xlpz0ga" +
		"j#oz$1lZBBmMrk#h9dz7$aLQAhfTjzBKxICeQxoozTzEpzLRd#LT#MngKUDuFeOwwHttDdQ" +
		"UN#7SN#gg7QT1eMYEdgmxmhXJkRRqO5i4epWYHN0S1l7Zk#68wKMlmmfZ$zKuocfSUol3iB" +
		"2YMh5JrJM4py3n53fHrOLngdFl3E8imZcFUXoRoVQwZ1t4#ofnbFxSUK7Bu7X3wGTZ#B8UJ" +
		"9q$BUlhHRkskcRIvyyoHVMJpcyG8mRnpXJwKxY31gixqzGeAj0NmZP3X1QmVJQiZt6GbuLa" +
		"9bbA5f2LP8FQCu7Zr0IGSYILl4DE0MOW2IFrIIZXQCq6998aaYQa6Oac4IIAD2MDIGnfIRg" +
		"IzYI9T20TIIVIZdGZoQGNwKtOjzcPVVkmp203I5NIqvf70MpFv#Ke$NLeSvvc7v99troMVH" +
		"qQdXKm#xdUPuUVqzIaEsmpI$kMq#wlVSCPVmRBGQpaiKnZkL#tZMBRB9P3MJcXVOFr#4Re#" +
		"f32$Pa3sJPFQqwGXTeVh7sBQ8VOvjfBbyl8lg9pC7AAcwFMR6RSaRglvjetYVPexHj3Xcd$" +
		"3jfw$COUscDjiGxHDuvCBhvFSuAjxgtB5YIUn9Af98Z4aUcahOTOjvBnn7eMqrpy4tKvXyo" +
		"yvCTKNMQKj3R$DLpFnRmSTgsxqLnmiNSLsFndSzp5Fl$F#aTvM$saBiDrsSgbxQ8kqstZyo" +
		"vcVfKTfLc3zXJjoz5bBjbhqv$JvJ7hT#uctfcIvsI4NhBD63tctOKrPYEjRMJjLrfpn4siM" +
		"ArFAAbVM$n4MxtWTvTlxOkbYUKobej5VTYEo$IHt#IyAdcLd#Kd#R68uWTr$LXEoKVoePoK" +
		"4$A1ydn1ZYlhc5FxFddFMNkNy9IHjybHEIo7P2EjWxAVrtsoKrvZkLDUbHtoYcoJbrdR9jj" +
		"bg#J95jgRPPDib0soNjP9hgnL4NFaWBobh6nrNQMkAzLrXNmbNohhWBmfUsMFx9Otv7NPHS" +
		"yH#LQ#eVzhMIkvXMRtkUJpNyzP#TxfkI3VSLL#L$QllFHdZciGancl3pC0Ami0im0lPYyc0" +
		"JCOmqatdj7TuSrCneUPZfMDWdc6uQIb2n4QAnj9PQmU98ssTG8bq#QfoMpVy4XhQXD86#Ou" +
		"RPYL9B9io$kI55xyRs0ospGKiQn7iPx2iQKmhfM1nj6NoT8TCTIsPpjFTUPNXYAQlexqyNH" +
		"dbcGuYQG$acKJZtWn9$Dc5cuGxjZKfzFNZ6Gnv#tp5$hAxIa=");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN37 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 37];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Module
			RETURN2,	// [1] $goal = $Dummy Dummy; returns 'Dummy' although none is marked
			RETURN6,	// [2] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [3] Imports = Import Imports; returns 'Imports' although none is marked
			Action.NONE,  	// [4] Imports = 
			RETURN3,	// [5] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [6] Declarations = Declaration Declarations; returns 'Declarations' although none is marked
			Action.NONE,  	// [7] Declarations = 
			Action.RETURN,	// [8] Declaration = FunctionDeclaration
			Action.RETURN,	// [9] Declaration = FieldDeclaration
			Action.RETURN,	// [10] Declaration = TypeDeclaration
			RETURN9,	// [11] FunctionDeclaration = AccessId TypeName ID LPAREN ParameterList RPAREN LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [12] FieldDeclaration = AccessId TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [13] TypeDeclaration = AccessId TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [14] AccessId = PUBLIC
			Action.NONE,  	// [15] AccessId = 
			Action.RETURN,	// [16] TypeName = PrimitiveType
			Action.RETURN,	// [17] TypeName = ArrayType
			Action.RETURN,	// [18] TypeName = ID
			Action.RETURN,	// [19] PrimitiveType = VOID
			Action.RETURN,	// [20] PrimitiveType = Boolean
			Action.RETURN,	// [21] PrimitiveType = INT_LITERAL
			Action.RETURN,	// [22] Boolean = TRUE
			Action.RETURN,	// [23] Boolean = FALSE
			RETURN3,	// [24] ArrayType = TypeName LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [25] Parameter = TypeName ID; returns 'ID' although none is marked
			RETURN2,	// [26] ParameterList = Parameter ParameterY; returns 'ParameterY' although none is marked
			RETURN3,	// [27] ParameterY = COMMA Parameter ParameterY; returns 'ParameterY' although none is marked
			Action.NONE,  	// [28] ParameterY = 
			RETURN2,	// [29] Statements = Statement Statements; returns 'Statements' although none is marked
			Action.NONE,  	// [30] Statements = 
			Action.RETURN,	// [31] Statement = LocalVariableDeclaration
			Action.RETURN,	// [32] Statement = BlockStatement
			Action.RETURN,	// [33] Statement = IfStatement
			Action.RETURN,	// [34] Statement = WhileStatement
			Action.RETURN,	// [35] Statement = BreakStatement
			Action.RETURN,	// [36] Statement = ReturnStatement
			Action.RETURN,	// [37] Statement = ExpressionStatement
			RETURN3,	// [38] LocalVariableDeclaration = TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [39] BlockStatement = LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN5,	// [40] IfStatement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN7,	// [41] IfStatement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [42] WhileStatement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [43] BreakStatement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [44] ReturnStatement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [45] ReturnStatement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [46] ExpressionStatement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [47] Expression = Assignment
			Action.RETURN,	// [48] Expression = RhsExpression
			RETURN3,	// [49] Assignment = LhsExpression EQL Expression; returns 'Expression' although none is marked
			RETURN2,	// [50] LhsExpression = ID LhsExpressionY; returns 'LhsExpressionY' although none is marked
			RETURN4,	// [51] LhsExpressionY = LBRACKET Expression RBRACKET LhsExpressionY; returns 'LhsExpressionY' although none is marked
			Action.NONE,  	// [52] LhsExpressionY = 
			Action.RETURN,	// [53] RhsExpression = ArithmeticExpression
			RETURN3,	// [54] RhsExpression = ArithmeticExpression ComparisonOperator ArithmeticExpression; returns 'ArithmeticExpression' although none is marked
			Action.RETURN,	// [55] ComparisonOperator = EQEQ
			Action.RETURN,	// [56] ComparisonOperator = NEQ
			Action.RETURN,	// [57] ComparisonOperator = LT
			Action.RETURN,	// [58] ComparisonOperator = LEQ
			Action.RETURN,	// [59] ComparisonOperator = GT
			Action.RETURN,	// [60] ComparisonOperator = GEQ
			RETURN2,	// [61] ArithmeticExpression = Term ArithmeticExpressionY; returns 'ArithmeticExpressionY' although none is marked
			RETURN3,	// [62] ArithmeticExpressionY = AdditiveOperator Term ArithmeticExpressionY; returns 'ArithmeticExpressionY' although none is marked
			Action.NONE,  	// [63] ArithmeticExpressionY = 
			Action.RETURN,	// [64] AdditiveOperator = PLUS
			Action.RETURN,	// [65] AdditiveOperator = MINUS
			RETURN2,	// [66] Term = Factor TermY; returns 'TermY' although none is marked
			RETURN3,	// [67] TermY = MultiplicativeOperator Factor TermY; returns 'TermY' although none is marked
			Action.NONE,  	// [68] TermY = 
			Action.RETURN,	// [69] MultiplicativeOperator = TIMES
			Action.RETURN,	// [70] MultiplicativeOperator = DIV
			Action.RETURN,	// [71] MultiplicativeOperator = MOD
			RETURN2,	// [72] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [73] Factor = PrimaryFactor
			Action.RETURN,	// [74] PrimaryFactor = LhsExpression
			Action.RETURN,	// [75] PrimaryFactor = FunctionCall
			Action.RETURN,	// [76] PrimaryFactor = ArrayExpression
			Action.RETURN,	// [77] PrimaryFactor = STRING_LITERAL
			Action.RETURN,	// [78] PrimaryFactor = INT_LITERAL
			Action.RETURN,	// [79] PrimaryFactor = Boolean
			RETURN3,	// [80] PrimaryFactor = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			RETURN4,	// [81] FunctionCall = ID LPAREN ExpressionListEmpty RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [82] ExpressionListEmpty = ExpressionList
			Action.NONE,  	// [83] ExpressionListEmpty = 
			RETURN2,	// [84] ExpressionList = Expression ExpressionListY; returns 'ExpressionListY' although none is marked
			RETURN3,	// [85] ExpressionListY = COMMA Expression ExpressionListY; returns 'ExpressionListY' although none is marked
			RETURN3,	// [86] ArrayExpression = LBRACKET ExpressionList RBRACKET; returns 'RBRACKET' although none is marked
			RETURN37	// [87] Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL; returns 'EQL' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
